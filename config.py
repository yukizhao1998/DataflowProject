import numpy as np
class Config():
    def __init__(self):
        self.datacenter_num=17
        self.copy_number=3 # 1, 3, 5
        self.dataset="1000"
        self.cache_size = 1000
        #self.datastore_size = 200
        self.cache_cost = 1
        self.filter_type = "CountingBloomFilter"
        self.load_datastore_path='./'+self.dataset+'/'+str(self.copy_number)+' copy/'
        self.load_query_path='./'+self.dataset+'/query/query_stream_'+self.dataset
        self.fprate=0.02 # filter's false positive rate
        self.miss_penalty=100
        self.cost_matrix=np.array([[ 1,  3,  6,  4, 10,  9,  5, 11, 33, 33,  4,  6,  4,  8,  7,  6,  9],
                                   [ 3,  1,  5,  3,  3, 10,  7, 11,  7,  9,  4,  6,  2,  7,  6,  7,  8],
                                   [ 6,  5,  1,  8,  5,  6,  6,  9,  6, 32,  4,  8,  5,  7, 33, 33, 33],
                                   [ 4,  3,  8,  1,  4, 10,  8, 11, 33,  8,  7,  5,  4,  7,  6,  6,  8],
                                   [10,  3,  5,  4,  1,  3,  7, 11,  7, 10,  4,  7,  3,  8, 10, 11,  9],
                                   [ 9, 10,  6, 10,  3,  1,  7, 11,  8, 33,  4, 10,  3,  8, 10, 10, 11],
                                   [ 5,  7,  6,  8,  7,  7,  1, 10,  6, 32,  6,  8,  6,  7, 33, 33, 33],
                                   [11, 11,  9, 11, 11, 11, 10,  1,  9, 32, 10, 33, 10, 10, 33, 33, 33],
                                   [33,  7,  6, 33,  7,  8,  6,  9,  1, 32,  6, 33,  7,  8, 33, 32, 32],
                                   [33,  9, 32,  8, 10, 33, 32, 32, 32,  1, 33, 32,  9,  9, 32, 32,  8],
                                   [ 4,  4,  4,  7,  4,  4,  6, 10,  6, 33,  1,  8,  3,  7,  7,  8,  9],
                                   [ 6,  6,  8,  5,  7, 10,  8, 33, 33, 32,  8,  1,  6,  7,  6,  6,  8],
                                   [ 4,  2,  5,  4,  3,  3,  6, 10,  7,  9,  3,  6,  1,  7,  7,  7,  9],
                                   [ 8,  7,  7,  7,  8,  8,  7, 10,  8,  9,  7,  7,  7,  1,  8,  8,  8],
                                   [ 6,  6, 33,  6, 10, 10, 33, 33, 33, 32,  7,  6,  7,  8,  1,  6,  9],
                                   [ 6,  7, 33,  6, 11, 10, 33, 33, 32, 32,  8,  6,  7,  8,  6,  1, 32],
                                   [ 9,  8, 33,  8,  9, 11, 33, 33, 32,  8,  9,  8,  9,  8,  9, 32,  1]])
